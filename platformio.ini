; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[env:bluepill_f103c8]
platform = ststm32
board = bluepill_f103c8
framework = libopencm3

# IP of remote machine hosting OpenOCD
board_build.opencocd_host = 192.168.1.42

# CPU frequency (for use by ITM setup only, doesn't effect build)
board_build.f_cpu = 72000000

# ITM UART baud rate (supposedly supports upto 24Mhz in UART mode, however 2Mbps works reliably where as higher speeds sometimes dont)
board_build.f_itm = 2000000

# ITM debug - commands to enable and configure UART trace output on PB3 (SWO) at 2Mbps
debug_extra_cmds =
	monitor stm32f1x.tpiu disable
	monitor stm32f1x.tpiu configure -protocol uart -traceclk ${this.board_build.f_cpu} -pin-freq ${this.board_build.f_itm} -output :6464
	monitor stm32f1x.tpiu enable
	monitor itm port 0 on

# Remote debugging
# Assuming xPack OpenOCD is installed, a command similar to the following could be used to start openOCD on the remote host:
# ~/.local/xPacks/openocd/xpack-openocd-0.11.0-5/bin/openocd -s ~/.local/xPacks/openocd/xpack-openocd-0.11.0-5/scripts -c "bindto 0.0.0.0" -f interface/stlink.cfg -c "transport select hla_swd" -f target/stm32f1x.cfg -c "reset_config none"
debug_tool = custom
debug_port = ${this.board_build.opencocd_host}:3333
debug_server =

# Have monitor connect to ITM port, provided by openOCD. While timestamping and filtering out undesirable characters.
monitor_port = socket://${this.board_build.opencocd_host}:6464
monitor_filters =
	itm_swo	; Remove SWO headers from input
	default	; Remove typical terminal control codes from input
	time	; Add timestamp with milliseconds for each new line